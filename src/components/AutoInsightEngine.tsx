
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Brain, TrendingUp, AlertTriangle, CheckCircle, X, Expand, Pin } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';

interface Insight {
  id: string;
  type: 'correlation' | 'anomaly' | 'trend' | 'suggestion' | 'quality';
  title: string;
  description: string;
  confidence: number;
  priority: 'high' | 'medium' | 'low';
  timestamp: Date;
  actionable?: boolean;
  data?: any;
}

interface AutoInsightEngineProps {
  dataset?: any;
  isActive?: boolean;
  aggressiveness?: number;
  onInsightAccepted?: (insight: Insight) => void;
  onInsightDismissed?: (insight: Insight) => void;
}

export default function AutoInsightEngine({ 
  dataset, 
  isActive = true, 
  aggressiveness = 50,
  onInsightAccepted,
  onInsightDismissed 
}: AutoInsightEngineProps) {
  const [insights, setInsights] = useState<Insight[]>([]);
  const [activeInsights, setActiveInsights] = useState<Insight[]>([]);
  const [pinnedInsights, setPinnedInsights] = useState<Insight[]>([]);
  const [engineIntensity, setEngineIntensity] = useState([aggressiveness]);

  // Mock insights that would be generated by AI analysis
  const generateMockInsights = (): Insight[] => [
    {
      id: '1',
      type: 'correlation',
      title: 'Strong Correlation Detected',
      description: 'Column "education_level" shows 0.74 correlation with "employment_status" — consider exploring this relationship further.',
      confidence: 89,
      priority: 'high',
      timestamp: new Date(),
      actionable: true,
      data: { columns: ['education_level', 'employment_status'], correlation: 0.74 }
    },
    {
      id: '2',
      type: 'anomaly',
      title: 'Outlier Pattern Found',
      description: '12 data points in "income" column are 3+ standard deviations from the mean. These may need review.',
      confidence: 76,
      priority: 'medium',
      timestamp: new Date(),
      actionable: true,
      data: { column: 'income', outliers: 12, threshold: 3 }
    },
    {
      id: '3',
      type: 'quality',
      title: 'Missing Data Pattern',
      description: 'Missing values in "age" column correlate with urban regions (r=0.32). This may indicate systematic bias.',
      confidence: 67,
      priority: 'medium',
      timestamp: new Date(),
      actionable: true,
      data: { column: 'age', pattern: 'urban_correlation', correlation: 0.32 }
    },
    {
      id: '4',
      type: 'suggestion',
      title: 'Visualization Recommendation',
      description: 'Your data would benefit from a geographic heatmap showing regional employment distribution.',
      confidence: 82,
      priority: 'low',
      timestamp: new Date(),
      actionable: true,
      data: { vizType: 'heatmap', focus: 'geographic' }
    }
  ];

  // Simulate real-time insight generation
  useEffect(() => {
    if (!isActive) return;

    const generateInsights = () => {
      const mockInsights = generateMockInsights();
      const intensityFactor = engineIntensity[0] / 100;
      const insightCount = Math.floor(mockInsights.length * intensityFactor);
      const selectedInsights = mockInsights.slice(0, Math.max(1, insightCount));
      
      setInsights(selectedInsights);
      
      // Show insights with delay based on priority
      selectedInsights.forEach((insight, index) => {
        const delay = insight.priority === 'high' ? 1000 : 
                     insight.priority === 'medium' ? 3000 : 5000;
        
        setTimeout(() => {
          setActiveInsights(prev => {
            if (!prev.find(i => i.id === insight.id)) {
              return [...prev, insight];
            }
            return prev;
          });
        }, delay + (index * 2000));
      });
    };

    const interval = setInterval(generateInsights, 10000);
    generateInsights(); // Initial generation

    return () => clearInterval(interval);
  }, [isActive, engineIntensity, dataset]);

  const handleAcceptInsight = (insight: Insight) => {
    setActiveInsights(prev => prev.filter(i => i.id !== insight.id));
    setPinnedInsights(prev => [...prev, insight]);
    onInsightAccepted?.(insight);
  };

  const handleDismissInsight = (insight: Insight) => {
    setActiveInsights(prev => prev.filter(i => i.id !== insight.id));
    onInsightDismissed?.(insight);
  };

  const getInsightIcon = (type: Insight['type']) => {
    switch (type) {
      case 'correlation': return <TrendingUp className="w-4 h-4" />;
      case 'anomaly': return <AlertTriangle className="w-4 h-4" />;
      case 'quality': return <CheckCircle className="w-4 h-4" />;
      case 'suggestion': return <Brain className="w-4 h-4" />;
      default: return <Brain className="w-4 h-4" />;
    }
  };

  const getPriorityColor = (priority: Insight['priority']) => {
    switch (priority) {
      case 'high': return 'from-destructive/20 to-destructive/5 border-destructive/30';
      case 'medium': return 'from-quantum-purple/20 to-quantum-purple/5 border-quantum-purple/30';
      case 'low': return 'from-primary/20 to-primary/5 border-primary/30';
    }
  };

  if (!isActive) {
    return null;
  }

  return (
    <div className="fixed top-20 right-6 w-80 z-40 space-y-4">
      {/* Engine Control Panel */}
      <Card className="glass p-4 border border-border/30">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center space-x-2">
            <Brain className="w-4 h-4 text-primary" />
            <span className="text-sm font-semibold">AI Insight Engine</span>
          </div>
          <Badge variant="outline" className="text-xs">
            {isActive ? 'Active' : 'Paused'}
          </Badge>
        </div>
        
        <div className="space-y-2">
          <div className="flex items-center justify-between text-xs">
            <span>Aggressiveness</span>
            <span>{engineIntensity[0]}%</span>
          </div>
          <Slider
            value={engineIntensity}
            onValueChange={setEngineIntensity}
            max={100}
            step={10}
            className="w-full"
          />
        </div>
        
        <div className="mt-3 text-xs text-muted-foreground">
          {insights.length} insights generated • {pinnedInsights.length} pinned
        </div>
      </Card>

      {/* Active Insight Notifications */}
      <AnimatePresence>
        {activeInsights.map((insight) => (
          <motion.div
            key={insight.id}
            initial={{ opacity: 0, x: 100, scale: 0.9 }}
            animate={{ opacity: 1, x: 0, scale: 1 }}
            exit={{ opacity: 0, x: 100, scale: 0.9 }}
            transition={{ duration: 0.4, ease: 'easeOut' }}
            className="relative"
          >
            <Card className={`glass p-4 bg-gradient-to-br ${getPriorityColor(insight.priority)} quantum-glow-hover border`}>
              {/* Header */}
              <div className="flex items-start justify-between mb-2">
                <div className="flex items-center space-x-2">
                  <div className={`p-1.5 rounded bg-gradient-to-br ${getPriorityColor(insight.priority)}`}>
                    {getInsightIcon(insight.type)}
                  </div>
                  <div>
                    <h4 className="text-sm font-semibold">{insight.title}</h4>
                    <div className="flex items-center space-x-2 mt-1">
                      <Badge variant="outline" className="text-xs">{insight.type}</Badge>
                      <span className="text-xs text-muted-foreground">
                        {insight.confidence}% confidence
                      </span>
                    </div>
                  </div>
                </div>
                
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-6 w-6 p-0"
                  onClick={() => handleDismissInsight(insight)}
                >
                  <X className="w-3 h-3" />
                </Button>
              </div>

              {/* Content */}
              <p className="text-xs text-muted-foreground mb-3 leading-relaxed">
                {insight.description}
              </p>

              {/* Actions */}
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Button
                    size="sm"
                    onClick={() => handleAcceptInsight(insight)}
                    className="h-7 px-3 text-xs bg-gradient-to-r from-primary to-quantum-purple"
                  >
                    <Pin className="w-3 h-3 mr-1" />
                    Pin
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-7 px-3 text-xs"
                    onClick={() => handleAcceptInsight(insight)}
                  >
                    <Expand className="w-3 h-3 mr-1" />
                    Explore
                  </Button>
                </div>
                
                <span className="text-xs text-muted-foreground">
                  {insight.timestamp.toLocaleTimeString()}
                </span>
              </div>

              {/* Priority Indicator */}
              <div className="absolute top-0 left-0 w-1 h-full rounded-l-lg bg-gradient-to-b from-current to-transparent opacity-60" />
            </Card>
          </motion.div>
        ))}
      </AnimatePresence>

      {/* Pinned Insights Summary */}
      {pinnedInsights.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-2"
        >
          <div className="text-xs font-semibold text-muted-foreground">Pinned Insights</div>
          {pinnedInsights.slice(0, 3).map((insight) => (
            <Card key={insight.id} className="glass p-2 border border-border/30">
              <div className="flex items-center space-x-2">
                {getInsightIcon(insight.type)}
                <span className="text-xs font-medium truncate flex-1">{insight.title}</span>
                <Badge variant="outline" className="text-xs">{insight.confidence}%</Badge>
              </div>
            </Card>
          ))}
        </motion.div>
      )}
    </div>
  );
}
